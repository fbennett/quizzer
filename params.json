{"name":"Quizzer","tagline":"A lightweight writing lab quiz engine for node.js","body":"## Overview\r\n\r\nQuizzer is an online support tool for academic writing instruction.\r\nIt can be installed with a single command, requires no student IDs or\r\npasswords, and works well with classes made up of students at varying\r\nstages of language acquisition, and from diverse language backgrounds.\r\n\r\nThe basic concept is to use student writing as the basis for a flood\r\nof pattern-recognition exercises, cast as online quizzes delivered by\r\nemail.  By raising the pace of iteration, the aim is to help students\r\ninternalize a sense of grammatical anomalies and stylistic\r\ninfelicities.\r\n\r\nWhile Quizzer can be used to generate multiple-choice quizzes for\r\na variety of purposes, the workflow it was built for runs like this:\r\n\r\n1. Students submit a 400-word essay once each week on an arbitrary\r\n   topic.\r\n2. The instructor selects representative errors of style and grammar\r\n   from the submissions, and composes a multiple-choice question\r\n   consisting of the student's own sentence, two alternatives that\r\n   also contain errors, and a corrected version.\r\n3. After constructing one question from each submitted essay, students\r\n   are sent personalized links to the resulting quiz.\r\n4. Students submit their responses, which are recorded on the Quizzer\r\n   server. Students receive feedback immediately feedback on their\r\n   incorrect responses. *Neither the essays nor the quiz results are\r\n   assessed.*\r\n5. Class commenters (TAs, instructors, and other experienced writers)\r\n   post short explanations of why the wrong answers were wrong. Where\r\n   appropriate, commenters from the students' own language domain can\r\n   be brought in to provide supplementary native-language guidance.\r\n6. Class commenters of the target language domain can set persistent\r\n   \"rules\" on-the-fly to cover issues that arise frequently. These\r\n   rules can then to set as comments on specific wrong answers, and\r\n   they can be translated by native-language commenters, for reference\r\n   by students of the same language domain.\r\n7. When students revisit their quiz links, they will find\r\n   their errors attached with explanatory rule, comments, and a list\r\n   of classmates who answered the question correctly.\r\n8. Students are given an assessed, paper-based, multiple-choice\r\n   supplementary mid-term and final exam, consisting entirely of\r\n   questions from the quizzes.\r\n\r\nQuiz distribution, commenting, exam composition, and marking are all\r\nmanaged by Quizzer. Paper tests are randomized as a hedge against\r\ncheating, and marked with a barcode reader for quick assessment.\r\n\r\nThe initial inspiration for Quizzer was a small [code\r\nsample](http://chetan0389.blogspot.jp/2013/06/quiz-using-htmlcss-jquery-xml-javascript.html)\r\nposted by Chetan Jain. The code has been refactored and extended\r\nconsiderably for this project, but I gratefully acknowledge the\r\nstarting point for this frolic. Hats off also to the developers of\r\n`node.js`, and LaTeX and, well, everything else. Quizzer was built on\r\nshort notice to fill a critical need, and it has been a real pleasure\r\nto see how quickly it could be brought together, and how smoothly\r\nit could be extended.\r\n\r\n## Requirements\r\n\r\nQuizzer is a `node.js` module. To get the website running, the\r\nminimum requirements are:\r\n\r\n> * `npm` >=1.3.x\r\n> * `node` >=0.10.x\r\n\r\nIn addition, the following external utilities are required\r\nfor the typesetting of exams:\r\n\r\n> * `pandoc` >=1.11.x (preferably compiled with texmath support)\r\n> * either `pdflatex`, or `platex` and `dvipdfmx` (the latter pair is needed\r\n>   only if Japanese text must be handled)\r\n\r\nLaTex (pLaTeX) documents created by Quizzer use the following\r\npackages:\r\n\r\n> * `makebarcode`\r\n> * `marginnote`\r\n> * `graphicx`\r\n> * `tikz`\r\n> * `ctable`\r\n> * `float`\r\n> * `hyphenat`\r\n> * `amsmath`\r\n\r\nQuizzer must have access to a mail transfer agent (MTA). This can\r\neither be a `sendmail` instance running on the same server, or a mail\r\nAPI to a service such as GMail.\r\n\r\nWith the above requirements in place, Quizzer can be run on a\r\nworkstation for initial trials, accessed via a port on `localhost`\r\n(aka `127.0.0.1`). For production use, Quizzer should be placed behind\r\na webserver, such as `lighttpd` or `apache`. Instructions for setting\r\nup the former are given below.\r\n\r\n## Basic Installation\r\n\r\nInstall quizzer from the `npm` repository:\r\n\r\n    npm install quizzer\r\n\r\nRun the server by saving the following code to a file (say, `quizServer.js`):\r\n\r\n    var qz = require('quizzer');\r\n    qz.run();\r\n\r\nRun the script from command line like this:\r\n\r\n    node ./quizServer.js\r\n\r\nThe script will whinge on first run, asking for some essential\r\ndetails:\r\n\r\n    usage: quizServer.js [-h] [-v] [-H PROXY_HOSTNAME] [-Q QUIZZER_PATH]\r\n                         [-p REAL_PORT] [-e EMAIL_ACCOUNT] [-s SMTP_HOST]\r\n                         [-l LOCALE] [-P] [-E]\r\n                         \r\n    \r\n    Quizzer, a quiz server\r\n    \r\n    Optional arguments:\r\n      -h, --help            Show this help message and exit.\r\n      -v, --version         Show program's version number and exit.\r\n      -H PROXY_HOSTNAME, --proxy-hostname PROXY_HOSTNAME\r\n                            Host name for external access\r\n      -Q QUIZZER_PATH, --quizzer-path QUIZZER_PATH\r\n                            Server path to quizzer (default: \"/quizzer/\")\r\n      -p REAL_PORT, --real-port REAL_PORT\r\n                            Port on which to listen for local connections\r\n                            (defaults to 3498)\r\n      -e EMAIL_ACCOUNT, --email-account EMAIL_ACCOUNT\r\n                            Full username of email account (e.g. useme@gmail.com)\r\n      -s SMTP_HOST, --smtp-host SMTP_HOST\r\n                            SMTP host name (e.g. smtp.gmail.com)\r\n      -l LOCALE, --locale LOCALE\r\n                            Language locale for admin interface (\"en\" or \"ja\")\r\n      -P, --use-platex      Use platex engine + dvipdfmx for PDF generation\r\n      -E, --use-euc-jp      Convert input text from UTF8 to legacy EUC-JP \r\n                            encoding before LaTeX processing\r\n      ERROR: must set option proxy_hostname\r\n      ERROR: must set option email_account\r\n\r\nTo get Quizzer running, set `proxy_hostname` to `localhost` (or `127.0.0.1`), and\r\nset `email_account` to your mail address (`me@mail.com` in the example below):\r\n\r\n    node ./quizServer -H localhost -e me@mail.com\r\n\r\nQuizzer will come up with a message like the following:\r\n\r\n    Wrote config parameters to quizzer-3498.cfg\r\n    Quizzer can now be run with the single option: -p 3498\r\n    Message: no mypwd.txt file found, will use local Sendmail transport\r\n    Using local Sendmail transport\r\n    Admin URL: http://localhost:3498/?admin=179359xq\r\n    Adding admin role\r\n    Loaded class membership keys\r\n    Woke up the mail schedulers\r\n    Done. Ready to shake, rattle and roll!\r\n\r\nThe website can now be accessed at the URL reported in the fifth line.\r\n(Note that the `admin` key is automatically generated, and will differ\r\nfrom that shown in the example above.)\r\n\r\nThe database and configuration files are created in the directory from\r\nwhich the script is run, named after the port number. The server can\r\nbe shut down with `CTRL-c` (`SIGINT`), and as the startup message\r\nsays, it can be restarted with the single option `-p <REAL_PORT>`\r\n\r\nA full explanation of the remaining options will be added to this\r\nREADME as time permits.\r\n\r\n## Running Quizzer behind a Proxy\r\n\r\nWhen `PROXY_HOSTNAME` is set to a fully qualified domain name\r\n(e.g. `myschool.edu`), it will assume that it is being run behind a\r\nreverse proxy, and adjust URLs accordingly. Quizzer itself has only\r\nthe thinnest concept of security, and should be run behind a proxy in\r\nproduction (and preferably over SSL). Access to the administrator\r\ndisplay depends on a key set in the URL of a GET request. Rewrite\r\nrules on the front-end web server should be used to assure that\r\nattempts to set the key directly are rerouted through a\r\npassword-protected URL.\r\n\r\nIf `lighttpd` is used as the front-end server, and Quizzer is run from\r\na directory `quizzer` to which the server has access, configuration\r\nsettings like the following should do the trick:\r\n\r\n    url.rewrite = (\r\n      \"^(?!/quizzer)(.*)\\?admin=[^&]+(?:&(.*))*\" => \"/quizzer/admin.html$1?$2\",\r\n      \"^(?!/quizzer)(.*)&admin=[^&]+(?:&(.*))*\" => \"/quizzer/admin.html$1&$2\",\r\n      \"^/quizzer/admin.html$\" => \"/quizzer/admin.html?admin=fyvg19vx\",\r\n      \"^/quizzer/admin.html\\?(.*)$\" => \"/quizzer/admin.html?admin=fyvg19vx&$1\"\r\n    )\r\n    \r\n    $HTTP[\"host\"] == \"faculty.of.things.edu\" {\r\n      proxy.server = ( \"/quizzer\" => ( ( \"host\" => \"127.0.0.1\", \"port\" => 3498 ) ) )\r\n    }\r\n    \r\n    auth.backend = \"htdigest\"\r\n    auth.backend.htdigest.userfile = \"/etc/lighttpd/lighttpd.user\"\r\n    \r\n    auth.require = ( \"/quizzer/admin.html\" =>\r\n      (\r\n        \"method\" => \"basic\",\r\n        \"realm\" => \"Quiz Admin\",\r\n        \"require\" => \"user=quizmaster\"\r\n      )\r\n    )\r\n    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}