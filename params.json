{"name":"Quizzer","tagline":"A lightweight writing lab quiz engine for node.js","body":"# Quizzer\r\n\r\nA lightweight quiz engine for `node.js`\r\n\r\n--------------------\r\n\r\n## Overview\r\n\r\nQuizzer is a tool for writing instruction. It is particularly suitable\r\nfor:\r\n\r\n* Second language learners\r\n* Students facing novel stylistic demands (such as in law school)\r\n* Any teaching environment where staff resources are in short supply\r\n\r\nIn contrast to many commercial offerings in the online education\r\n\"sphere\", Quizzer is not designed to replace the instructor: it was\r\nbuild *by* an instructor, to enable more efficient and positive\r\ninteraction with students over issues of grammar and style.\r\n\r\nQuizzer is simple to install and use. A couple of highlights to\r\nencourage the reader:\r\n\r\n* Students do not need to be issued IDs and passwords. It just works.\r\n* The entire system can be installed with a single command.\r\n\r\nQuizzer makes intensive use of multiple-choice quizzes, *not* as a\r\ntest of knowledge or of skill \"level\", but as a lightweight means of\r\nencouraging students to engage positively with flaws in their\r\nwriting. In our Academic Writing program in the Nagoya University\r\nFaculty of Law, Quizzer supports the following workflow:\r\n\r\n1. Students submit a 400-word essay once each week on an arbitrary\r\n   topic.\r\n2. The instructor selects one poorly-written sentence from each\r\n   essay, and composes a multiple-choice question consisting of the\r\n   student's own sentence, two alternatives that also contain errors,\r\n   and a corrected version. *The essays themselves are not assessed.*\r\n3. After constructing one question from each submitted essay, students\r\n   are sent personalized links to the resulting quiz.\r\n4. Students submit their responses, which are recorded on the Quizzer\r\n   server. Student receive feedback immediately feedback on their\r\n   incorrect responses.\r\n5. Class commenters (TAs, instructors, and other experienced writers)\r\n   post short explanations of why the wrong answers were wrong.\r\n6. When students revisit their quiz links, they will find\r\n   both the comments, and a list of classmates who gave the correct answer\r\n   to the questions that they missed.\r\n7. Students are given an assessed, paper-based, multiple-choice\r\n   supplementary mid-term and final exam, consisting entirely of\r\n   questions from the quizzes.\r\n\r\nQuiz distribtion, commenting, exam composition, and marking are all\r\nmanaged by Quizzer. Paper tests are randomized as a hedge against\r\ncheating, and marked with a barcode reader for quick assessment.\r\n\r\nAs an additional feature suited to our own environment, the native\r\nlanguages of students choosing each wrong answer are shown in the\r\ncommenter view. This allows satellite commenters (alumni with\r\nstrong English writing skills, in our case) to provide guidance\r\nin the native language of the students concerned.\r\n\r\nThe initial inspiration for Quizzer was a small [code\r\nsample](http://chetan0389.blogspot.jp/2013/06/quiz-using-htmlcss-jquery-xml-javascript.html)\r\nposted by Chetan Jain. The code has been refactored and extended\r\nconsiderably for this project, but I gratefully acknowledge the\r\nstarting point for this frolic. Hats off also to the developers of\r\n`node.js`, and `LaTeX` and, well, everything else. Quizzer was built\r\non short notice to fill a critical need, and it has been a real\r\npleasure to see how quickly the whole thing could be brought together.\r\n\r\n## Basic Installation\r\n\r\nInstall quizzer from the `npm` repository:\r\n\r\n    npm install quizzer\r\n\r\nIn addition to the dependencies pulled in by `npm`, Quizzer needs to\r\nhave access to the external programs `pandoc` and `pdflatex`. Both\r\nshould be available as package installs on your operating system (the\r\nlatter as part of the `texlive` package).\r\n\r\nRun the server by saving the following code to a file (such as `quizServer.js`,\r\nsay):\r\n\r\n    var qz = require('quizzer');\r\n    qz.run();\r\n\r\nRun the script from command line like this:\r\n\r\n    node ./quizServer.js\r\n\r\nThe script will whinge on first run, asking for some essential\r\ndetails:\r\n\r\n    usage: quizServer.js [-h] [-v] [-H PROXY_HOSTNAME] [-p REAL_PORT]\r\n                         [-e EMAIL_ACCOUNT] [-s SMTP_HOST]\r\n                         \r\n    \r\n    Quizzer, a quiz server\r\n    \r\n    Optional arguments:\r\n      -h, --help            Show this help message and exit.\r\n      -v, --version         Show program's version number and exit.\r\n      -H PROXY_HOSTNAME, --proxy-hostname PROXY_HOSTNAME\r\n                            Host name for external access\r\n      -p REAL_PORT, --real-port REAL_PORT\r\n                            Port on which to listen for local connections\r\n      -e EMAIL_ACCOUNT, --email-account EMAIL_ACCOUNT\r\n                            Full username of email account (e.g. useme@gmail.com)\r\n      -s SMTP_HOST, --smtp-host SMTP_HOST\r\n                            SMTP host name (e.g. smtp.gmail.com)\r\n      ERROR: must set option smtp_host\r\n      ERROR: must set option proxy_hostname\r\n      ERROR: must set option email_account\r\n\r\nA GMail account can be used as `EMAIL_ACCOUNT`, with `smtp.gmail.com` as `SMTP_HOST`.\r\n`REAL_PORT` will default to `3498`, but can be set to other values for multiple\r\nserver instances. For initial testing, `PROXY_HOSTNAME` should be set to `127.0.0.1`\r\nor `localhost`. Running again will yield this:\r\n\r\n    ERROR: file mypwd.txt not found: Error: ENOENT, no such file or directory './mypwd.txt'\r\n\r\nSave the email account password to disk in a file `mypwd.txt` (only the user running\r\nQuizzer should have access permissions on the file, obviously). This will get the server\r\nrunning:\r\n\r\n    Wrote config parameters to quizzer-3498.cfg\r\n    Quizzer can now be run with the single option: -p 3498\r\n    Admin URL: http://localhost:3498/?admin=fyvg19vx\r\n    Adding admin role\r\n    Loaded class membership keys\r\n    Done. Ready to shake, rattle and roll!\r\n\r\nConnect to the listed URL with a browser, and you're ready to go.  The\r\ndatabase and configuration files are created in the directory from\r\nwhich the script is run, named after the port number. The server can\r\nbe shut down with `CTRL-c` (`SIGINT`), and as the startup message\r\nsays, it can be restarted with the single option `-p <REAL_PORT>`\r\n(Note that the `admin` key is automatically generated, and will differ\r\nfrom that shown in the example above.)\r\n\r\n## Running Quizzer behind a Proxy\r\n\r\nWhen `PROXY_HOSTNAME` is set to a fully qualified domain name\r\n(e.g. `myschool.edu`), it will assume that it is being run behind a\r\nreverse proxy, and adjust URLs accordingly. Quizzer itself has only\r\nthe thinnest concept of security, and should be run behind a proxy in\r\nproduction (and preferably over SSL). Access to the administrator\r\ndisplay depends on a key set in the URL of a GET request. Rewrite\r\nrules on the front-end web server should be used to assure that\r\nattempts to set the key directly are rerouted through a\r\npassword-protected URL.\r\n\r\nIf `lighttpd` is used as the front-end server, and Quizzer is run from\r\na directory `quizzer` to which the server has access, configuration\r\nsettings like the following should do the trick:\r\n\r\n    url.rewrite = (\r\n      \"^(?!/quizzer)(.*)\\?admin=[^&]+(?:&(.*))*\" => \"/quizzer/admin.html$1?$2\",\r\n      \"^(?!/quizzer)(.*)&admin=[^&]+(?:&(.*))*\" => \"/quizzer/admin.html$1&$2\",\r\n      \"^/quizzer/admin.html$\" => \"/quizzer/admin.html?admin=fyvg19vx\",\r\n      \"^/quizzer/admin.html\\?(.*)$\" => \"/quizzer/admin.html?admin=fyvg19vx&$1\"\r\n    )\r\n    \r\n    $HTTP[\"host\"] == \"faculty.of.things.edu\" {\r\n      proxy.server = ( \"/quizzer\" => ( ( \"host\" => \"127.0.0.1\", \"port\" => 3498 ) ) )\r\n    }\r\n    \r\n    auth.backend = \"htdigest\"\r\n    auth.backend.htdigest.userfile = \"/etc/lighttpd/lighttpd.user\"\r\n    \r\n    auth.require = ( \"/quizzer/admin.html\" =>\r\n      (\r\n        \"method\" => \"basic\",\r\n        \"realm\" => \"Quiz Admin\",\r\n        \"require\" => \"user=quizmaster\"\r\n      )\r\n    )\r\n    \r\n## Adding Commenters\r\n\r\nQuizzer data is held in an `sqlite3` database, located in the directory\r\nfrom which the script is run, and named after the port number under\r\nwhich the instance is running. \r\n\r\ncommenters are held in the `admin` table of the Quizzer database.\r\nThere is no web interface to this table: add commenters by inserting\r\nthem directly, using the `sqlite3` access tool, like so:\r\n\r\n    sqlite3> INSERT INTO admin VALUES (NULL, 'jeff', 'ahTh3nie', 2, 0);\r\n\r\nThe `NULL` value in the first column is for the automatically-assigned\r\nnumeric ID of the database row. The second column is the screen\r\nname of the commenter, which must be unique. The third column is the\r\naccess key that will be included in the personal URL of the commenter,\r\nand must also be unique. Under Linux, the `pwgen` utility is a handy\r\ntool for creating these. The fourth column is the role of the commenter,\r\nand must be set to `2`. The fifth column is currently unused, but may\r\neventually control the intervals at which scheduled key resets and\r\nreminder mailings occur.\r\n\r\nAfter commenters have been added to the `admin` table, their\r\naccess URLs will be reported in the startup chatter. For example:\r\n\r\n    Reading config from quizzer-3498.cfg\r\n    Admin URL: http://localhost:3498/?admin=fyvg19vx\r\n    Adding admin role\r\n    Adding commenter 'adam' with URL http://localhost:3498/?commenter=En5chaej\r\n    Adding commenter 'bob' with URL http://localhost:3498/?commenter=koosha1D\r\n    Adding commenter 'chris' with URL http://localhost:3498/?commenter=Ro5aise5\r\n    Loaded class membership keys\r\n    Done. Ready to shake, rattle and roll!\r\n\r\nThe commenter links show a list of courses, and course links a list\r\nof quizzes with the number of uncommented mistakes, if any. Clicking on\r\na quiz link opens a list of wrong answers, sorted in descending order\r\nof frequency among quiz-takers, and with already-commented answers\r\npushed to the bottom.\r\n\r\n`Markdown` syntax is recognized in comment text, with a few small\r\nextensions. To set markers in text, enclose a number or letter in\r\ndouble parens:\r\n\r\n    This will render as a circle-A: ((A))\r\n\r\nFor an explanation of why a wrong answer was wrong,\r\nset a single `>` character at the beginning of the line,\r\nfollowed by the pasted text of the wrong answer to be explained:\r\n\r\n    > Many new legislations were passed in 2010.\r\n\r\nMark text targeted for specific comment by wrapping it in\r\ndouble-quotes, opening with a single letter or number:\r\n\r\n    > ((1 Many)) new ((2 legislations)) ((3 were)) passed in 2010.\r\n\r\n    ((2)) is a non-countable noun, and is *never* written\r\n    with an 's'. With a non-countable noun, use 'much', not\r\n    'many' at ((1)), and the singular verb form at ((3)).\r\n\r\nFor a comment that states a pattern, open with two '>' characters:\r\n\r\n    >> I studied *for* two hours.\r\n\r\nFor a comment that states a grammatical rule, open with\r\nthree '>' characters:\r\n\r\n    >>> Never use the word \"nowadays\" in formal writing.\r\n\r\nWhen set at the very beginning of an entry, the explanation,\r\npattern, and rule prefixes trigger a tidy heading in the displayed\r\nentry.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}